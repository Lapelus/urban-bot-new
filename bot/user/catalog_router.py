from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, FSInputFile, BufferedInputFile
from loguru import logger
from pyexpat.errors import messages
from sqlalchemy.ext.asyncio import AsyncSession
from bot.user.img_gen import ticket_gen
from bot.admin.utils import process_dell_text_msg
from bot.config import bot, settings
from bot.dao.dao import UserDAO, CategoryDao, ProductDao, PurchaseDao, TicketDao
from bot.dao.models import Ticket
from bot.user.kbs import main_user_kb, catalog_kb, product_kb, get_product_buy_kb, confirm_age_kb
from bot.user.schemas import TelegramIDModel, ProductCategoryIDModel, PaymentData, TicketData
from bot.admin.kbs import admin_confirm_buy, cancel_kb_inline, home_kb_inline

catalog_router = Router()


class BuyTicket(StatesGroup):
    product_id = State()
    namesurname = State()
    year = State()
    tel_number = State()
    payment_id = State()


@catalog_router.callback_query(F.data == "catalog")
async def page_catalog(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    catalog_data = await CategoryDao.find_all(session=session_without_commit)

    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=catalog_kb(catalog_data)
    )


@catalog_router.callback_query(F.data.startswith("category_"))
async def page_catalog_products(call: CallbackQuery, session_without_commit: AsyncSession):
    category_id = int(call.data.split("_")[-1])
    products_category = await ProductDao.find_all(session=session_without_commit,
                                                  filters=ProductCategoryIDModel(category_id=category_id))
    count_products = len(products_category)
    if count_products:
        await call.answer(f"–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {count_products} —Ç–æ–≤–∞—Ä–æ–≤.")
        for product in products_category:
            product_text = (
                f"üé´ <b>{product.name}</b>\n\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.price} —Ä—É–±.\n\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product.description}</i>\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )
            await call.message.answer(
                product_text,
                reply_markup=product_kb(product.id, product.price)
            )
    else:
        await call.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")


#@catalog_router.callback_query(F.data.startswith('buy_'))
#async def process_about(call: CallbackQuery, session_without_commit: AsyncSession):
#    user_info = await UserDAO.find_one_or_none(
#        session=session_without_commit,
#        filters=TelegramIDModel(telegram_id=call.from_user.id)
#    )
#    _, product_id, price = call.data.split('_')
#    await bot.send_invoice(
#        chat_id=call.from_user.id,
#        title=f'–û–ø–ª–∞—Ç–∞ üëâ {price}‚ÇΩ',
#        description=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {price}‚ÇΩ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É.',
#        payload=f"{user_info.id}_{product_id}",
#        provider_token=settings.PROVIDER_TOKEN,
#        currency='rub',
#        prices=[LabeledPrice(
#            label=f'–û–ø–ª–∞—Ç–∞ {price}',
#            amount=int(price) * 100
#        )],
#        reply_markup=get_product_buy_kb(price)
#    )
#    await call.message.delete()

@catalog_router.callback_query(F.data.startswith('name_buy_'))
async def user_process_buy_ticket(call: CallbackQuery, state: FSMContext):
    _, a, product_id, price = call.data.split('_')
    await call.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
    await call.message.delete()
    msg = await call.message.answer(text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id, product_id=product_id)
    await state.set_state(BuyTicket.namesurname)


@catalog_router.message(F.text, BuyTicket.namesurname)
async def user_insert_name(message: Message, state: FSMContext):
    await state.update_data(namesurname=message.text)
    await process_dell_text_msg(message, state)
    msg = await message.answer(text="ü§ì –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(BuyTicket.year)


@catalog_router.message(F.text, BuyTicket.year)
async def user_insert_year(message: Message, state: FSMContext):
    await state.update_data(year=message.text)
    await process_dell_text_msg(message, state)
    msg = await message.answer(text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω –ø–µ—Ä–µ–≤–æ–¥)",
                               reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(BuyTicket.tel_number)


@catalog_router.message(F.text, BuyTicket.tel_number)
async def user_insert_tel_number(message: Message, state: FSMContext, session_without_commit: AsyncSession):
    await state.update_data(tel_number=message.text)
    await process_dell_text_msg(message, state)
    product_id = await state.get_value(key='product_id')
    product_data = await ProductDao.find_one_or_none_by_id(data_id=int(product_id), session=session_without_commit)
    price = product_data.price
    msg = await message.answer(text="üîû –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –í–∞–º –±—É–¥–µ—Ç –±–æ–ª—å—à–µ 18 –ª–µ—Ç",
                               reply_markup=confirm_age_kb(product_id, price))
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(BuyTicket.payment_id)


@catalog_router.callback_query(F.data.startswith('buy_'), BuyTicket.payment_id)
async def process_about(call: CallbackQuery):
    _, product_id, price = call.data.split('_')
    text = (
        f"üí∏ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: <b>{price}—Ä—É–±</b>\n"
        "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>89660998213 –ú–∞—Ä–∏—è –ü. !!–¢-–±–∞–Ω–∫!!</b>\n"
        "–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ <b>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</b> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
        "üïí <i>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 1 —á–∞—Å–∞, –µ—Å–ª–∏ —Å–ø—É—Å—Ç—è —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –¢–æ–ª–∏–∫—É: @toliktarakanov</i>"
    )
    return await call.message.answer(text=text, reply_markup=get_product_buy_kb(product_id, call.from_user.id))


@catalog_router.callback_query(F.data.startswith('pay_'), BuyTicket.payment_id)
async def process_about(call: CallbackQuery, session_with_commit: AsyncSession, state: FSMContext):
    _, product_id, user_tg_id = call.data.split('_')
    product_data = await ProductDao.find_one_or_none_by_id(session=session_with_commit, data_id=int(product_id))
    payment_data = {
        'user_id': int(call.from_user.id),
        'price': int(product_data.price),
        'product_id': int(product_id),
        'paid': False
    }
    payment_data_up = await PurchaseDao.find_one_or_none(session=session_with_commit,
                                                         filters=PaymentData(**payment_data))
    if payment_data_up:
        pass
    else:
        await PurchaseDao.add(session=session_with_commit, values=PaymentData(**payment_data))
    payment_data_up = await PurchaseDao.find_one_or_none(session=session_with_commit,
                                                         filters=PaymentData(**payment_data))
    ticket_data = await state.get_data()
    for admin_id in settings.ADMIN_IDS:
        try:
            username = call.from_user.username
            user_info = f"@{username} ({call.from_user.id})" if username else f"c ID {call.from_user.id}"

            await bot.send_message(
                chat_id=admin_id,
                text=(
                    f"üí≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É <b>{product_data.name}</b> (ID: {product_id}) "
                    f"–∑–∞ <b>{product_data.price} ‚ÇΩ</b>.\n"
                    f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {ticket_data["namesurname"]} –Ω–æ–º–µ—Ä: {ticket_data["tel_number"]}\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É"
                ),
                reply_markup=admin_confirm_buy(payment_data_up.id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
    await state.update_data(payment_id=str(payment_data_up.id))


@catalog_router.callback_query(F.data.startswith("get_"))
async def process_about(call: CallbackQuery, state: FSMContext, session_with_commit: AsyncSession):
    user_ticket_data = await state.get_data()
    product_data = await ProductDao.find_one_or_none_by_id(data_id=int(user_ticket_data["product_id"]),
                                                           session=session_with_commit)
    del user_ticket_data["last_msg_id"]
    del user_ticket_data["product_id"]
    await TicketDao.add(session_with_commit, values=TicketData(**user_ticket_data))
    await call.message.answer_photo(photo=BufferedInputFile(await ticket_gen(user_ticket_data["payment_id"], product_data.price), filename="ticket.jpeg"))
    await call.message.answer(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=home_kb_inline())
#@catalog_router.pre_checkout_query(lambda query: True)
#async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
#    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


#@catalog_router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
#async def successful_payment(message: Message, session_with_commit: AsyncSession):
#    payment_info = message.successful_payment
#    user_id, product_id = payment_info.invoice_payload.split('_')
#    payment_data = {
#        'user_id': int(user_id),
#        'price': payment_info.total_amount / 100,
#        'product_id': int(product_id)
#    }
#    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#    await PurchaseDao.add(session=session_with_commit, values=PaymentData(**payment_data))
#    product_data = await ProductDao.find_one_or_none_by_id(session=session_with_commit, data_id=int(product_id))
#
#    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
#    for admin_id in settings.ADMIN_IDS:
#        try:
#            username = message.from_user.username
#            user_info = f"@{username} ({message.from_user.id})" if username else f"c ID {message.from_user.id}"
#
#            await bot.send_message(
#                chat_id=admin_id,
#                text=(
#                    f"üí≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä <b>{product_data.name}</b> (ID: {product_id}) "
#                    f"–∑–∞ <b>{product_data.price} ‚ÇΩ</b>."
#                )
#            )
#        except Exception as e:
#            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
#
#    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#    file_text = "üì¶ <b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª:</b>" if product_data.file_id else "üìÑ <b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"
#    product_text = (
#        f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
#        f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ:</b>\n"
#        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
#        f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <b>{product_data.name}</b>\n"
#        f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product_data.description}</i>\n"
#        f"üîπ <b>–¶–µ–Ω–∞:</b> <b>{product_data.price} ‚ÇΩ</b>\n"
#        f"üîπ <b>–ó–∞–∫—Ä—ã—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product_data.hidden_content}</i>\n"
#        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
#        f"{file_text}\n\n"
#        f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ª–∏—á–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ.</b>"
#    )
#
#    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#    if product_data.file_id:
#        await message.answer_document(
#            document=product_data.file_id,
#            caption=product_text,
#            reply_markup=main_user_kb(message.from_user.id)
#        )
#    else:
#        await message.answer(
#            text=product_text,
#            reply_markup=main_user_kb(message.from_user.id)
#        )
